{"version":3,"sources":["Core.js","App.js","serviceWorker.js","index.js"],"names":["Core","passengers","seating","ROW_WISE_SEATS","SEAT_LOCATION","SUM_OF_POSITIONS","W","M","C","i","length","columns","rows","W_SEAT","M_SEAT","C_SEAT","j","k","Object","values","map","o","STARTING_POSITIONS","SEAT_FILLING","STARTING_POSITIONS_MATRIX","0","keys","x","y","class","value","App","useState","passengerCount","setPassengerCount","seatingArrangement","setSeatingArrangement","table","setTable","FILLING","fillSeats","parsedSeating","JSON","parse","_table","index","push","key","result","td","className","renderTable","htmlFor","type","id","placeholder","name","onChange","e","target","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3bc2a5df.chunk.js","sourcesContent":["function Core(passengers, seating) {\n//   var passengers = 35;\n//   var seating = [\n//     [3, 2],\n//     [4, 6],\n//     [2, 3],\n//     [3, 4],\n//   ];\n  var ROW_WISE_SEATS = {};\n  var SEAT_LOCATION = {};\n  var SUM_OF_POSITIONS = {\n    W: 0,\n    M: 0,\n    C: 0,\n  };\n  for (var i = 0; i < seating.length; i++) {\n    let columns = seating[i][0];\n    let rows = seating[i][1];\n    SEAT_LOCATION[i] = {};\n    let W_SEAT = 0,\n      M_SEAT = 0,\n      C_SEAT = 0;\n    for (var j = 0; j < columns; j++) {\n      if (\n        (i === 0 && j == 0) ||\n        (i === seating.length - 1 && j == columns - 1)\n      ) {\n        W_SEAT += 1;\n      } else if (j === 0 || j === columns - 1) {\n        C_SEAT += 1;\n      } else {\n        M_SEAT += 1;\n      }\n    }\n    for (var k = 0; k < rows; k++) {\n      ROW_WISE_SEATS[k] = ROW_WISE_SEATS[k] || {};\n      ROW_WISE_SEATS[k][\"W\"] = ROW_WISE_SEATS[k][\"W\"] || 0;\n      ROW_WISE_SEATS[k][\"W\"] += W_SEAT;\n      ROW_WISE_SEATS[k][\"M\"] = ROW_WISE_SEATS[k][\"M\"] || 0;\n      ROW_WISE_SEATS[k][\"M\"] += M_SEAT;\n      ROW_WISE_SEATS[k][\"C\"] = ROW_WISE_SEATS[k][\"C\"] || 0;\n      ROW_WISE_SEATS[k][\"C\"] += C_SEAT;\n    }\n  }\n  let values = Object.values(ROW_WISE_SEATS);\n  Object.values(ROW_WISE_SEATS).map((o) => {\n    SUM_OF_POSITIONS.W += o.W;\n    SUM_OF_POSITIONS.M += o.M;\n    SUM_OF_POSITIONS.C += o.C;\n  });\n  var STARTING_POSITIONS = {\n    W: 0,\n    M: 0,\n    C: 0,\n  };\n  STARTING_POSITIONS.C = 1;\n  STARTING_POSITIONS.W = SUM_OF_POSITIONS.C + 1;\n  STARTING_POSITIONS.M = SUM_OF_POSITIONS.C + SUM_OF_POSITIONS.W + 1;\n  var SEAT_FILLING = {};\n  // var UPDATED_STARTING_POSITION = {\n  //   ...STARTING_POSITIONS,\n  // };\n  var STARTING_POSITIONS_MATRIX = {\n    0: STARTING_POSITIONS,\n  };\n  for (var i = 1; i < Object.keys(ROW_WISE_SEATS).length; i++) {\n    // let rows = seating[i][1];\n    // let columns = seating[i][0];\n    // for (j = 1; j <= 3; j++) {\n    // console.log(STARTING_POSITIONS_MATRIX[i - 1].W )\n    // console.log(ROW_WISE_SEATS[i-1].W)\n    STARTING_POSITIONS_MATRIX[i] = {\n      W: STARTING_POSITIONS_MATRIX[i - 1].W + ROW_WISE_SEATS[i - 1].W,\n      M: STARTING_POSITIONS_MATRIX[i - 1].M + ROW_WISE_SEATS[i - 1].M,\n      C: STARTING_POSITIONS_MATRIX[i - 1].C + ROW_WISE_SEATS[i - 1].C,\n    };\n    // }\n  }\n  for (var i = 0; i < seating.length; i++) {\n    SEAT_FILLING[i] = SEAT_FILLING[i] || {};\n    //   STARTING_POSITIONS = UPDATED_STARTING_POSITION;\n    let rows = seating[i][1]; // 2\n    let columns = seating[i][0]; // 3\n    for (var x = 0; x < rows; x++) {\n      for (var y = 0; y < columns; y++) {\n        SEAT_FILLING[i][x] = SEAT_FILLING[i][x] || {};\n        SEAT_FILLING[i][x][y] = 0;\n        if (\n          (i == 0 && y == 0) ||\n          (i == seating.length - 1 && y == columns - 1)\n        ) {\n          SEAT_FILLING[i][x][y] = {\n            class: \"WINDOW\",\n            value: 0,\n          };\n          if (STARTING_POSITIONS_MATRIX[x].W <= passengers) {\n            SEAT_FILLING[i][x][y] = {\n              class: \"WINDOW\",\n              value: STARTING_POSITIONS_MATRIX[x].W,\n            };\n            STARTING_POSITIONS_MATRIX[x].W += 1;\n          }\n        } else if (y == 0 || y == columns - 1) {\n          SEAT_FILLING[i][x][y] = {\n            class: \"CORNER\",\n            value: \"\",\n          };\n          if (STARTING_POSITIONS_MATRIX[x].C <= passengers) {\n            SEAT_FILLING[i][x][y] = {\n              class: \"CORNER\",\n              value: STARTING_POSITIONS_MATRIX[x].C,\n            };\n            STARTING_POSITIONS_MATRIX[x].C += 1;\n          }\n        } else {\n          SEAT_FILLING[i][x][y] = {\n            class: \"MIDDLE\",\n            value: \"\",\n          };\n          if (STARTING_POSITIONS_MATRIX[x].M <= passengers) {\n            SEAT_FILLING[i][x][y] = {\n              class: \"MIDDLE\",\n              value: STARTING_POSITIONS_MATRIX[x].M,\n            };\n            STARTING_POSITIONS_MATRIX[x].M += 1;\n          }\n        }\n      }\n    }\n  }\n  // console.log(AVAILABLE_SEATS)\n  // console.log(\"ROW_WISE_SEATS\");\n  // console.log(ROW_WISE_SEATS);\n  // console.log(\"SUM_OF_POSITIONS\");\n  // console.log(SUM_OF_POSITIONS);\n  // console.log(\"STARTING_POSITIONS\");\n  // console.log(STARTING_POSITIONS);\n  // console.log(\"STARTING_POSITIONS_MATRIX\");\n  // console.log(STARTING_POSITIONS_MATRIX);\n  // console.log(\"SEAT_FILLING\");\n  // console.log(SEAT_FILLING);\n\n  //   var colorSchema = [];\n  //   for (var i = 0; i < seating.length; i++) {\n  //     SEAT_FILLING[i] = SEAT_FILLING[i] || {};\n  //     let rows = seating[i][1]; // 2\n  //     let columns = seating[i][0]; // 3\n  //     for (var x = 0; x < rows; x++) {\n  //       for (var y = 0; y < columns; y++) {\n  //         SEAT_FILLING[i][x] = SEAT_FILLING[i][x] || {};\n  //         // SEAT_FILLING[i][x][y] = {\n  //         //   class: \"WINDOW\",\n  //         //   value: 0,\n  //         // };\n  //         if (\n  //           (i === 0 && y === 0) ||\n  //           (i === seating.length - 1 && y === columns - 1)\n  //         ) {\n  //           if (STARTING_POSITIONS_MATRIX[x].W <= passengers) {\n  //             SEAT_FILLING[i][x][y] = {\n  //               class: \"WINDOW\",\n  //               value: STARTING_POSITIONS_MATRIX[x].W,\n  //             };\n  //             STARTING_POSITIONS_MATRIX[x].W += 1;\n  //           }\n  //         } else if (y === 0 || y === columns - 1) {\n  //           if (STARTING_POSITIONS_MATRIX[x].C <= passengers) {\n  //             SEAT_FILLING[i][x][y] = {\n  //               class: \"CORNER\",\n  //               value: STARTING_POSITIONS_MATRIX[x].C,\n  //             };\n  //             STARTING_POSITIONS_MATRIX[x].C += 1;\n  //           }\n  //         } else {\n  //           if (STARTING_POSITIONS_MATRIX[x].M <= passengers) {\n  //             SEAT_FILLING[i][x][y] = {\n  //               class: \"MIDDLE\",\n  //               value: STARTING_POSITIONS_MATRIX[x].M,\n  //             };\n  //             STARTING_POSITIONS_MATRIX[x].M += 1;\n  //           }\n  //         }\n  //       }\n  //     }\n  //   }\n  //   console.log(\"ROW_WISE_SEATS\");\n  //   console.log(ROW_WISE_SEATS);\n  //   console.log(\"SUM_OF_POSITIONS\");\n  //   console.log(SUM_OF_POSITIONS);\n  //   console.log(\"STARTING_POSITIONS\");\n  //   console.log(STARTING_POSITIONS);\n  //   console.log(\"STARTING_POSITIONS_MATRIX\");\n  //   console.log(STARTING_POSITIONS_MATRIX);\n  //   console.log(\"SEAT_FILLING\");\n//   console.log(SEAT_FILLING);\n  return SEAT_FILLING;\n}\n\nexport default Core;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Core from \"./Core\";\n\nfunction App() {\n  var passengers = 30;\n\n  let [passengerCount, setPassengerCount] = useState(passengers);\n  let [seatingArrangement, setSeatingArrangement] = useState(\"[ [3,2], [4,3], [2,3], [3,4] ]\");\n  let [table, setTable] = useState([]);\n\n  var FILLING = null;\n\n  function renderTable(i, index) {\n    // console.log(FILLING[0]);\n    let result = [];\n    for (var j = 0; j < i[1]; j++) {\n      var td = [];\n      for (var k = 0; k < i[0]; k++) {\n        td.push(\n          <td key={k} className={FILLING[index][j][k].class}>\n            {FILLING[index][j][k].value}\n          </td>\n        );\n      }\n      result.push(<tr key={j}>{td}</tr>);\n    }\n    return result;\n    // return <h1>1</h1>;\n  }\n\n  function fillSeats() {\n    var parsedSeating = JSON.parse(seatingArrangement);\n    FILLING = Core(passengerCount, parsedSeating);\n    var _table = []\n    parsedSeating.map((i, index) => {\n      _table.push(\n        <table key={index}>\n          <tbody>{renderTable(i, index)}</tbody>\n        </table>\n      );\n    });\n    setTable(_table)\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <div className=\"form-inline\">\n          <label htmlFor=\"passengers\">Total Passengers:</label>\n          <input\n            type=\"number\"\n            id=\"passengers\"\n            placeholder=\"10\"\n            name=\"passengers\"\n            value={passengerCount}\n            onChange={(e) => setPassengerCount(e.target.value)}\n          />\n          <label htmlFor=\"seating\">Seating Arrangement:</label>\n          <input\n            type=\"text\"\n            id=\"seating\"\n            placeholder=\"[[1,2], [1,2]]\"\n            name=\"seating\"\n            value={seatingArrangement}\n            onChange={(e) => setSeatingArrangement(e.target.value)}\n          />\n          <button onClick={() => fillSeats()}>Fill Seats</button>\n        </div>\n      </div>\n      {table}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}